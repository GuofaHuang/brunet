#!/bin/bash

echo -n Start time is: 
date

NUM_NODES_PM=$1 #Number of nodes per machine variable
ATTEMPTED_NODES_FILE=$2
SCRIPT_DIR=/home/jskong/scripts
#ATTEMPTED_NODES_FILE contains the plab nodes that we would attempt to use
#ATTEMPTED_NODES_FILE="/home/jskong/scripts/attempted_nodes.txt"
#ATTEMPTED_NODES_FILE="/home/jskong/scripts/temp/attempted_sword_nodes.txt"
#ATTEMPTED_NODES_FILE="/home/jskong/all_nodes.txt"
#the FAST_NODES_FILE contains the plab nodes with small ping times to cantor
FAST_NODES_FILE="/home/jskong/scripts/fast_nodes.txt"
#the CP_NODES_FILE contains the nodes that we successfully copied file to
CP_NODES_FILE="/home/jskong/scripts/cp_nodes.txt"
#the EXE_NODES_FILE contains the nodes that we successfully executed the .exe for Brunet
EXE_NODES_FILE="/home/jskong/scripts/exe_nodes.txt"
RESULTS_FILE="/home/jskong/results/results.txt"
FIGURE1="/home/jskong/results/results.txtout1.ps"
FIGURE2="/home/jskong/results/results.txtout2.ps"
NM_FILE="/home/jskong/results/results.txt_struct.nm"
ALIVE_RESULTS_FILE="/home/jskong/results/alive_results.txt"
VERIFIER_FILE="/home/jskong/results/verifier.txt"
OLD_VERIFIER_FILE="/home/jskong/results/old_verifier.txt"
CTM_RESULTS_FILE="/home/jskong/results/ctm_results.txt"
CONSOLE_RESULTS_FILE="/home/jskong/results/console_results.txt"
NET_EVOL_FILE="/home/jskong/results/net_evol.txt"
ADDRESS_MAP_FILE="/home/jskong/results/results.txt.address_map"
HAVE_MONO_FILE="/home/jskong/scripts/have_mono_nodes.txt"
REMOVAL_VERIFIER_FILE="/home/jskong/results/removal_verifier.txt"

FAILED_NODES_FILE="/home/jskong/scripts/temp/failed_nodes.txt"

DUMMY_FILE="/home/jskong/scripts/temp/dummy.txt"
DUMMY_FILE2="/home/jskong/scripts/temp/dummy2.txt"
CP_TEMP_FILE="/home/jskong/scripts/temp/cp_temp.txt"
EXE_TEMP_FILE="/home/jskong/scripts/temp/exe_temp.txt"
COPY_FAIL_FILE="/home/jskong/scripts/temp/copy_fail.txt"
KILL_SUCCESS_FILE="/home/jskong/scripts/temp/kill_success.txt"
KILL_FAIL_FILE="/home/jskong/scripts/temp/kill_fail.txt"
SLURP_FAIL_FILE="/home/jskong/scripts/temp/slurp_fail.txt"

#COPY_FOLDER="/home/jskong/mono-1.0.1"
COPY_FOLDER="/home/jskong/joe/"
for file in /home/jskong/joe/*; do
  if [[ -e $file ]]; then
    rm $file
  fi
done
cp ~/cp_folder/* $COPY_FOLDER

EXEC="STARTMONO""$NUM_NODES_PM"
#EXEC="STRUCTURETESTEXEC0"

EXECUTION_TIME=150 #This is the number of seconds that we wait between the last node join
                  #and the time we collect data from the nodes
#NODE_UPTIME=300   #This is the number of seconds that a Brunet program would run
PAR=200
MAX_SLURP_ITER=5
MAX_COPY_ITER=5

cd $SCRIPT_DIR

if [ `pwd` != "$SCRIPT_DIR" ]
then
 echo "Can't change to $SCRIPT_DIR."
 exit 
fi

echo
echo Using the attempted nodes in "$ATTEMPTED_NODES_FILE", note that cantor must NOT be in this file
echo

./screenplnodesnew.py $ATTEMPTED_NODES_FILE > $FAST_NODES_FILE
echo List of fast nodes available in $FAST_NODES_FILE
echo

#pssh -p $PAR -t 60 -h $FAST_NODES_FILE -l uclaee_brunet1 -o /tmp/out/ -e /tmp/error/ which mono > $DUMMY_FILE

if [ -e $HAVE_MONO_FILE ]
then
 rm $HAVE_MONO_FILE
fi

#NUM_MONO_NODES=0
#while read word0 word1 word2; do
#   if [ "$word0" == "Success" ]
#      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $HAVE_MONO_FILE  
#      (( NUM_MONO_NODES = NUM_MONO_NODES + 1 ));
#   fi
#done < $DUMMY_FILE
#echo Number of mono nodes: $NUM_MONO_NODES

cp $FAST_NODES_FILE $HAVE_MONO_FILE
echo List of fast and have-mono nodes available in $HAVE_MONO_FILE, A reliable node such as cantor must be on the list
echo

./generate_xmlnew.sh $NUM_NODES_PM $HAVE_MONO_FILE > ~/joe/TestNetwork.brunet

./AddtoDns.exe ~/joe/TestNetwork.brunet > ~/results/dnsmap.txt

pscp -p $PAR -t 60 -e /tmp/error/ -o /tmp/out/ -l uclaee_brunet1 -h $HAVE_MONO_FILE -r $COPY_FOLDER /home/uclaee_brunet1/ > $CP_TEMP_FILE

> $DUMMY_FILE
> $CP_NODES_FILE
if [ -e $COPY_FAIL_FILE ]; then rm $COPY_FAIL_FILE; fi;
 
NUM_CP_NODES=0; 
while read word0 word1 word2; do
   if [ "$word0" == "Success" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $CP_NODES_FILE
      (( NUM_CP_NODES = NUM_CP_NODES + 1 ));
   elif [ "$word0" == "Error" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $COPY_FAIL_FILE
   fi
done < $CP_TEMP_FILE

COPY_ITER=0
while [[ -e $COPY_FAIL_FILE && $COPY_ITER < $MAX_COPY_ITER ]]; do
  pscp -p $PAR -t 60 -e /tmp/error/ -o /tmp/out/ -l uclaee_brunet1 -h $COPY_FAIL_FILE -r $COPY_FOLDER /home/uclaee_brunet1/ > $CP_TEMP_FILE
  rm $COPY_FAIL_FILE 
  echo Following nodes fail to get the files on iteration number $COPY_ITER:
  while read word0 word1 word2; do
   if [ "$word0" == "Error" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $COPY_FAIL_FILE
      echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }'
   elif [ "$word0" == "Success" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $CP_NODES_FILE
      (( NUM_CP_NODES = NUM_CP_NODES + 1 ));
   fi
  done < $CP_TEMP_FILE
  (( COPY_ITER++ ))
done

echo List of nodes with successful copied files is in $CP_NODES_FILE, No. nodes = $NUM_CP_NODES

pssh -p $PAR -t 60 -h $ATTEMPTED_NODES_FILE -l uclaee_brunet1 -o /tmp/out/ -e /tmp/error/ killall -9 "mono" "sleep"

echo

if [ -e $FAILED_NODES_FILE ]
then
 rm $FAILED_NODES_FILE
fi

if [ -e $EXE_NODES_FILE ]
then
 rm $EXE_NODES_FILE
fi

#> $DUMMY_FILE
#./shuffle.py $CP_NODES_FILE $DUMMY_FILE
#echo cantor.ee.ucla.edu > $DUMMY_FILE2
#cp $DUMMY_FILE $CP_NODES_FILE

rm -rf ~/results/data/*
~/plcmd $EXEC $HAVE_MONO_FILE #> $DUMMY_FILE
echo -n Finished deploying: 
date
while read word0 word1; do
   if [ "$word1" == "failed" ]
      then echo "$word0" >> $FAILED_NODES_FILE
   elif [ "$word1" == "done" ]
      then echo "$word0" >> $EXE_NODES_FILE      
   fi
done < $DUMMY_FILE

for num in 1 2 3;
do
echo We will let the nodes run for $EXECUTION_TIME seconds

sleep $EXECUTION_TIME
#rm -rf ~/results/data/*

echo -n Copying dataset No. $num at: 
date -u
pslurp -r -h $EXE_NODES_FILE  -o /tmp/out/ -e   /tmp/error/ -p $PAR -t 60 -L ~/results/data/ -l uclaee_brunet1 \
/home/uclaee_brunet1/joe/data/ ./ > $DUMMY_FILE

if [ -e $SLURP_FAIL_FILE ]
then
 rm $SLURP_FAIL_FILE
fi
echo Following nodes fail to obtain data:
while read word0 word1 word2; do
   if [ "$word0" == "Error" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $SLURP_FAIL_FILE
      echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }'
      #scp -r "uclaee_brunet1@""$word2"":/home/uclaee_brunet1/joe/data/" "~/results/data/""$word2"
   fi
done < $DUMMY_FILE


SLURP_ITER=0
while [[ -e $SLURP_FAIL_FILE && $SLURP_ITER < $MAX_SLURP_ITER ]]; do
  pslurp -r -h $SLURP_FAIL_FILE  -o /tmp/out/ -e /tmp/error/ -p $PAR -t 80 -L ~/results/data/ -l uclaee_brunet1 \
  /home/uclaee_brunet1/joe/data/ ./ > $DUMMY_FILE
  rm $SLURP_FAIL_FILE
  echo Following nodes fail to obtain data on iteration number $SLURP_ITER:
  while read word0 word1 word2; do
    if [ "$word0" == "Error" ]
      then echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }' >> $SLURP_FAIL_FILE
      echo "$word2" | awk 'BEGIN{ FS=":" } { print $1 }'
   fi
  done < $DUMMY_FILE
  (( SLURP_ITER++ ))
done

echo We are done with copying data to local directory

cd /home/jskong/results/
./get_results $NUM_NODES_PM "brunetadd"
./get_results $NUM_NODES_PM "alive"
#./get_results $CTM_RESULTS_FILE "ctm"
./get_results $NUM_NODES_PM "console"

echo The results are in $RESULTS_FILE and $ALIVE_RESULTS_FILE

./logtonmgraph.py $RESULTS_FILE
~/scripts/chronilog.py $RESULTS_FILE > $NET_EVOL_FILE
./oldverifier $NM_FILE type 0 > $OLD_VERIFIER_FILE
./verifier $NET_EVOL_FILE 0 $VERIFIER_FILE
./removalverifier $NET_EVOL_FILE 0 $REMOVAL_VERIFIER_FILE

ZIPFILE="experiment0""$num"".tgz"
#tar -cvzf $ZIPFILE $ATTEMPTED_NODES_FILE $EXE_NODES_FILE $RESULTS_FILE $ALIVE_RESULTS_FILE $FIGURE1 \
#$VERIFIER_FILE $CTM_RESULTS_FILE $TESTLOG_RESULTS_FILE $NET_EVOL_FILE $ADDRESS_MAP_FILE

if (( $(( NUM_CP_NODES * NUM_NODES_PM )) <= 50 )); then
  ./circle.pl --log=$RESULTS_FILE
  gv $FIGURE1 &
  tar -cvzf $ZIPFILE $ATTEMPTED_NODES_FILE ~/scripts/exe_nodes.txt results.txt alive_results.txt \
  results.txtout1.ps verifier.txt net_evol.txt results.txt.address_map testlog.txt console_results.txt \
  structured.gdl last_distance.dist last.cdf removal_verifier.txt
else
#  ./circlebig.pl --log=$RESULTS_FILE
#  gv $FIGURE1 &   results.txtout1.ps 
  tar -cvzf $ZIPFILE $ATTEMPTED_NODES_FILE ~/scripts/exe_nodes.txt results.txt alive_results.txt \
  verifier.txt old_verifier.txt net_evol.txt results.txt.address_map testlog.txt console_results.txt \
  structured.gdl last_distance.dist last.cdf removal_verifier.txt
fi

echo A tarball of the log files is $ZIPFILE
done


