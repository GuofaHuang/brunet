Brief Documentation of PlanetLab Testing of BruNet

This writeup is meant to allow other people to reproduce plab test results.  If you have 
any question, email Joseph Kong: jskong8@yahoo.com or 310-825-1030.

1.Copy the files necessary for running BruNet on a machine to a public http website. We usually 
only need 4 files (Brunet.dll, Brunet-TestUtil.dll, Echotester.exe and TestNetwork.brunet).  

2.Start ssh-agent on your machine (do ssh-agent /bin/sh then ssh-add).  This will gives 
you password-less access to plab machines.  Of course, I assume you already have a plab 
login, been assigned slices, etc.  

3.Use 'pldeploy' in the Nixes tool set to copy the BruNet files to a list of plab machines. 
A command looks like this: ./pldeploy plab_nodes.txt .  The file plab_nodes.txt contains a 
list of the domain names of the machines you want to run the test on. Information about the 
Nixes tool set and file download can be found here: http://www.aqualab.cs.northwestern.edu  

4.Use 'plcmd' in the Nixes tool set to execute the EchoTester on plab machines.  The 'plcmd' 
is kind of tricky to use.  I suggest you read the script and documentation before using it.  
One can insert a 'sleep' command in the for-loop of the script to introduce join time delays.

5.Once EchoTest is running on remote machines, I suggest you to login to some of these nodes 
to do a sanity check of how EchoTest is doing.  Anything can go wrong or happen on plab.  So, 
it's always a good idea to do a sanity check.

6.Use 'pslurp' command to extract all the log files on remote machines to a local machine. 
 Information and download about the 'pslurp' command can be found here: http://www.theether.org/pssh/  
Note that files are extracted as the tests are running on the plab machines.

7.Now, on the local machine,  I use a simple perl script ('get_results') to merge all the log 
files from different plab nodes into one single file.  One then use Jesse's scripts (circle.pl, 
ringo1.py, ringo2.py and bgraph.py) to generate the figures of the network.  Different subnetworks 
(structured, unstructured, etc) can be generated by changing one line in the script. All scripts can 
be obtained here: http://kupka.ee.ucla.edu/public_html/joewebstuff/plabtest/ or under the 
/tests/scripts/plab/ or /tests/scripts/verifier/ directory

A sample command is: ./circle.pl --log=results.txt .  Be sure that ringo1.py, ringo2.py and bgraph.py 
are all in the same directory before running this command.

8.For numerically verifying the ring structure, follow this instruction from Behnam: 

go into the verifier directory
copy logtonmgraph.py and netmodeler into your local directory
./logtonmgraph.py  yourfilename
./netmodeler yourfilename_struct.nm type 0

You can use the file results15secoscar.txt as an example.

It will tell you if the ring is correct and if not will give the name of 
the nodes and edges missing  in the  testlog.txt

This is a brief tutorial.  I will try to type up a more comprehensive tutorial soon.  Any question, fell free to contact me.
